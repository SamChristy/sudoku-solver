import { Sudoku } from '../../../types/interfaces/SudokuSolver';
import SudokuSolver from '../SudokuSolver';

it('validates sudokus', () => {
  const validSudoku = [
    [0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 9, 5, 0, 0, 0, 0, 6, 0],
    [0, 8, 0, 0, 0, 0, 5, 3, 0],
    [0, 6, 0, 8, 0, 0, 7, 9, 0],
    [3, 5, 0, 4, 0, 0, 2, 0, 0],
    [0, 4, 0, 9, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 6, 0, 0, 2],
    [8, 3, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 5, 0, 0, 0, 6],
  ];
  expect(new SudokuSolver(validSudoku).isValid()).toBeTrue();

  const invalidSudoku = [
    [0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 9, 5, 0, 0, 0, 0, 5, 0],
    [0, 8, 0, 0, 1, 0, 5, 3, 0],
    [0, 6, 0, 8, 0, 0, 7, 9, 0],
    [3, 5, 0, 4, 0, 0, 2, 0, 0],
    [0, 4, 0, 9, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 6, 0, 0, 2],
    [8, 3, 0, 0, 0, 0, 0, 3, 0],
    [0, 0, 0, 0, 5, 0, 0, 0, 6],
  ];
  expect(new SudokuSolver(invalidSudoku).isValid()).toBeFalse();
});

it('solves sudokus', () => {
  const sudoku = [
    [3, 0, 0, 8, 0, 1, 0, 0, 2],
    [2, 0, 1, 0, 3, 0, 6, 0, 4],
    [0, 0, 0, 2, 0, 4, 0, 0, 0],
    [8, 0, 9, 0, 0, 0, 1, 0, 6],
    [0, 6, 0, 0, 0, 0, 0, 5, 0],
    [7, 0, 2, 0, 0, 0, 4, 0, 9],
    [0, 0, 0, 5, 0, 9, 0, 0, 0],
    [9, 0, 4, 0, 8, 0, 7, 0, 5],
    [6, 0, 0, 1, 0, 7, 0, 0, 3],
  ];
  const solvedSudoku = [
    [3, 4, 6, 8, 9, 1, 5, 7, 2],
    [2, 9, 1, 7, 3, 5, 6, 8, 4],
    [5, 7, 8, 2, 6, 4, 3, 9, 1],
    [8, 5, 9, 4, 7, 3, 1, 2, 6],
    [4, 6, 3, 9, 1, 2, 8, 5, 7],
    [7, 1, 2, 6, 5, 8, 4, 3, 9],
    [1, 3, 7, 5, 4, 9, 2, 6, 8],
    [9, 2, 4, 3, 8, 6, 7, 1, 5],
    [6, 8, 5, 1, 2, 7, 9, 4, 3],
  ];

  const result = new SudokuSolver(sudoku).solve();
  expect(new SudokuSolver(result as Sudoku).isValid()).toBeTrue();
  expect(result).toEqual(solvedSudoku);

  const sudoku2 = [
    [0, 4, 0, 2, 6, 0, 9, 5, 0],
    [0, 6, 0, 0, 8, 0, 7, 0, 0],
    [0, 0, 0, 9, 1, 0, 8, 3, 0],
    [0, 0, 0, 8, 0, 0, 3, 2, 0],
    [0, 0, 0, 7, 2, 0, 0, 0, 5],
    [5, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 4],
    [7, 0, 0, 5, 0, 8, 0, 0, 0],
    [8, 0, 5, 0, 0, 0, 0, 0, 0],
  ];

  const solved2 = [
    [3, 4, 8, 2, 6, 7, 9, 5, 1],
    [1, 6, 9, 3, 8, 5, 7, 4, 2],
    [2, 5, 7, 9, 1, 4, 8, 3, 6],
    [4, 7, 6, 8, 5, 1, 3, 2, 9],
    [9, 8, 3, 7, 2, 6, 4, 1, 5],
    [5, 2, 1, 4, 3, 9, 6, 7, 8],
    [6, 9, 2, 1, 7, 3, 5, 8, 4],
    [7, 1, 4, 5, 9, 8, 2, 6, 3],
    [8, 3, 5, 6, 4, 2, 1, 9, 7],
  ];

  expect(new SudokuSolver(sudoku2).solve()).toEqual(solved2);
});

it('solves hard sudokus', () => {
  const sudoku = [
    [5, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 4, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 5, 6, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 4, 0, 2, 0, 7, 0, 0, 0],
    [6, 0, 0, 0, 0, 0, 8, 0, 0],
    [8, 0, 0, 1, 4, 0, 0, 0, 5],
    [0, 0, 9, 0, 6, 0, 0, 0, 4],
    [0, 0, 3, 0, 0, 0, 0, 9, 2],
  ];
  const solvedSudoku = [
    [5, 3, 1, 8, 2, 6, 4, 7, 9],
    [9, 7, 6, 4, 1, 5, 3, 2, 8],
    [2, 8, 4, 9, 7, 3, 5, 6, 1],
    [7, 1, 8, 6, 9, 4, 2, 5, 3],
    [3, 4, 5, 2, 8, 7, 9, 1, 6],
    [6, 9, 2, 5, 3, 1, 8, 4, 7],
    [8, 2, 7, 1, 4, 9, 6, 3, 5],
    [1, 5, 9, 3, 6, 2, 7, 8, 4],
    [4, 6, 3, 7, 5, 8, 1, 9, 2],
  ];

  const result = new SudokuSolver(sudoku).solve();

  expect(new SudokuSolver(result as Sudoku).isValid()).toBeTrue();
  expect(result).toEqual(solvedSudoku);
});
